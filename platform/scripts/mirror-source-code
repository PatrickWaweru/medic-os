#!/bin/sh

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/../.."

usage()
{
  echo "Usage: $0 bucket [settings_path]" >&2
  exit 1
}

warn()
{
  echo "Warning: $*" >&2
}

fatal()
{
  echo "Fatal: $*" >&2
  exit 111
}

list_mirror_urls()
{
  local manifest_dir="$base_dir/platform/source/manifests"

  find "$manifest_dir" -type f \! -name '.*' -exec cat {} \; \
    | grep -v '^ *#' | sort | cut -d, -f2 | sed 's/^ //;'
}

mirror()
{
  local bucket="$1"
  local target_path="$2"

  local temp_dir="`mktemp -d`" && cd "$temp_dir" \
    || fatal 'Unable to create temporary directory'

  mkdir -p "$target_path" \
    || fatal 'Unable to create target directory structure'

  # Download phase 
  list_mirror_urls | while read url; do

    local file="`basename "$url"`"

    if echo "$url" | grep -q '\.git$'; then
      echo "Skipping Git repository '$file'"
      continue
    fi

    echo "Downloading '$file':" &&
    (cd "$target_path" && curl --location -#O "$url")

    if [ "$?" -ne 0 ]; then
      warn "An error occurred while fetching '$url'"
      fatal "Unable to download required file '$file'; aborting"
    fi
  done &&
  \
  # Upload phase
  find "$target_path" -type f | while read file; do

    echo "Uploading '$file':" &&
    s3put --region "$EC2_REGION" -p "$temp_dir" -b "$bucket" "$file"

    if [ "$?" -ne 0 ]; then
      fatal "Unable to upload '$file' to S3; aborting"
    fi
  done
       
  rv="$?"
  rm -rf "$temp_dir"
  return "$rv"
}

main()
{
  local bucket="$1"
  local settings_file="$2"

  if [ "$#" -lt 1 -o "$1" = '-h' -o "$1" = '--help' ]; then
    usage
  fi

  settings="`aws_load_settings "$settings_file"`" && eval "$settings" \
    || fatal 'Unable to load AWS settings'

  aws_cleanup_environment &&
  mirror "$bucket" 'medic-os/mirror/source' "$settings_file"

  return "$?"
}

cd "$base_dir" \
  || fatal 'Unable to locate root directory'

source ./platform/scripts/include/aws \
  || fatal 'Unable to load one or more required libraries'

main "$@"
exit "$?"

