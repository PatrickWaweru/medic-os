#!/bin/bash

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/../.."

usage()
{
  echo "Usage: $0 target_path [use_insecure]" >&2
  exit 1
}

warn()
{
  echo "Warning: $*" >&2
}

fatal()
{
  echo "Fatal: $*" >&2
  exit 111
}

list_mirror_urls()
{
  local manifest_dir="$base_dir/platform/source/manifests"

  find "$manifest_dir" -type f \! -name '.*' -exec cat {} \; \
    | grep -v '^ *#' | sort | cut -d, -f2 | sed 's/^ //;'
}

mirror()
{
  local path="$1"
  local use_insecure="$2"

  mkdir -p -- "$path" \
    || fatal 'Unable to create destination directory'

  local curl_args='-LO#'

  if [ "$use_insecure" ]; then
    curl_args="$curl_args --insecure"
  fi

  list_mirror_urls | while read url; do

    local file="`basename "$url"`"

    if echo "$url" | grep -q '\.git$'; then
      echo "Skipping Git repository '$file'"
      continue
    fi

    echo "Downloading '$file':" &&
    (cd "$path" && curl $curl_args "$url")

    if [ "$?" -ne 0 ]; then
      warn "An error occurred while fetching '$url'"
      fatal "Unable to download required file '$file'; aborting"
    fi
  done
}

main()
{
  local path="$1"
  local use_insecure="$2"

  if [ "$#" -lt 1 -o "$#" -gt 2 -o "$1" = '-h' -o "$1" = '--help' ]; then
    usage
  fi

  path="`readlink -f "$path" 2>/dev/null || realpath "$path" 2>/dev/null`" \
    || fatal 'Unable to resolve absolute path for destination'

  cd "$base_dir" \
    || fatal 'Unable to locate root directory'

  mirror "$path" "$use_insecure"
}

main "$@"
exit "$?"

