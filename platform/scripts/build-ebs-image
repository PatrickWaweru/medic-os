#!/bin/bash

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/../.."

fatal()
{
  echo "Fatal: $*" >&2
  exit 111
}

warn()
{
  echo "Warning: $*" >&2
}

usage()
{
  echo "Usage: $0 settings_path platform image description device [method]"
  exit 1
}

wait_for_device()
{
  local device="$1"

  local interval='5'
  local attempts='10'

  for i in `seq 1 "$attempts"`; do
    if [ -b "$device" ]; then
      return 0
    fi
    sleep "$interval"
  done

  return 1
}

wait_for_resource_generic()
{
  local command_name="$1"
  local resource_id="$2"
  local resource_type="$3"
  local result_field="$4"
  local goal_status="$5"

  local interval='10'
  local attempts='36'

  while [ "$attempts" -gt 0 ]; do
    local status="`
      "$command_name" "$resource_id" -region "$EC2_REGION" \
        | grep "^$resource_type"| cut -f"$result_field"
    `"
    if [ "$?" -eq 0 -a "$status" = "$goal_status" ]; then
      return 0
    fi
    sleep "$interval"
    attempts=$[$attempts - 1]
  done

  return 1

  sleep 20
}

wait_for_volume_availability()
{
  local volume_id="$1"

  wait_for_resource_generic \
    ec2-describe-volumes "$volume_id" VOLUME 6 available

  return "$?"
}

wait_for_snapshot_availability()
{
  local snapshot_id="$1"

  wait_for_resource_generic \
    ec2-describe-snapshots "$snapshot_id" SNAPSHOT 4 completed

  return "$?"
}

main()
{
  local settings="$1"
  local platform="$2"
  local image="$3"
  local description="$4"
  local device="$5"
  local method="$6"

  if [ "$1" = '-h' -o "$1" = '--help' ]; then
    usage
  fi

  if [ "$#" -lt 5 -o "$#" -gt 6 ]; then
    usage
  fi

  local aki=''
  local architecture=''

  case "$platform" in
    x64)
      aki='aki-fc8f11cc'
      architecture='x86_64' ;;
    x86)
      aki='aki-7a69931a'
      architecture='i386' ;;
    *)
      fatal "Unsupported platform '$platform'" ;;
  esac

  if ! [ -f "$image" ]; then
    fatal "Unable to locate Xen image '$image'"
  fi

  if [ -z "$description" ]; then
    fatal "An image description must be specified"
  fi

  if [ -z "$device" -o -e "$device" ]; then
    fatal "A not-yet-existing block-special device must be specified"
  fi

  settings="`aws_load_settings "$settings"`" &&
    eval "$settings" && aws_cleanup_environment \
      || fatal 'Unable to read AWS environment/settings file'

  echo -n 'Creating temporary volume... ' >&2

  local volume_id="`
    ec2-create-volume -s1 \
      -z "$EC2_AVAILABILITY_ZONE" --region "$EC2_REGION" | cut -f2
  `" || fatal 'Failed to create volume'

  wait_for_volume_availability "$volume_id" &&
  \
  ec2-create-tags "$volume_id" --tag "Name=$description" >/dev/null \
    || fatal "Failure while setting tags on volume '$volume_id'"

  ec2-attach-volume "$volume_id" -i "`
    ec2-metadata -i | cut -d: -f2 | sed -E 's/^ *//'
  `" -d "$device" >/dev/null || fatal 'Failed to attach temporary volume'

  echo 'done.' >&2
  echo "Volume identifier: $volume_id" >&2
  echo -n 'Building EBS system image... ' >&2

  wait_for_device "$device" \
    || fatal 'Volume did not attach during timeout period'

  # Copy disk image:
  #   There are two supported methods. The `direct` method
  #   preserves the original filesystem size (even if the target
  #   device is larger), while the `default` method produces a
  #   filesystem that is always the exact size of the target device.
  
  if [ "$method" = 'direct' ]; then

    # Direct method:
    #   Make a bit-for-bit copy of the original input image.
    #   The filesystem size will remain completely unchanged,
    #   and any ext3/ext4 filesystem options will be preserved.

    sudo dd if="$image" of="$device" 2>/dev/null \
      || fatal "Failure while writing image directly to '$device'"

  else

    # Default method:
    #   Mount the original input image, then copy all of the files
    #   from inside of it to a newly-created filesystem. The new
    #   filesystem will always be the exact same size as the target
    #   device. To maximize compatibility, the new filesystem will
    #   be created with most of the optional ext4 features turned off.

    local ext4_options='none,extent,large_file,has_journal'

    sudo mkfs.ext4 -O "$ext4_options" -q "$device" >/dev/null \
        || fatal "Failure while formatting device '$device'"

    sudo mkdir -p /mnt/startup &&
    sudo mount "$device" /mnt/startup \
      || fatal "Failure while mounting device '$device'"

    sudo mkdir -p /mnt/loopback &&
    sudo mount -o loop "$image" /mnt/loopback \
      || fatal "Failure while mounting loopback image '$image'"

    sudo cp -a -- /mnt/loopback/* /mnt/startup/ \
      || fatal 'Failure while copying files'

    sudo umount /mnt/loopback /mnt/startup \
      || fatal 'Failure while unmounting volumes'
  fi

  sudo sync && sleep 1 && sudo sync \
    || fatal 'Failure while synchronizing disks'

  ec2-detach-volume --region "$EC2_REGION" "$volume_id" >/dev/null \
    || fatal 'Failure while detaching volume'

  echo 'done.' >&2
  echo -n 'Creating EBS snapshot... ' >&2

  local snapshot_id="`
    ec2-create-snapshot "$volume_id" \
      --region "$EC2_REGION" -d "$description" | cut -f2 \
  `" || fatal "Failure while creating snapshot for volume '$volume_id'"

  wait_for_snapshot_availability "$snapshot_id" &&
  \
  ec2-create-tags "$snapshot_id" \
    --region "$EC2_REGION" --tag "Name=$description" >/dev/null \
      || fatal "Failure while setting tags on snapshot '$snapshot_id'"

  echo 'done.' >&2
  echo "Snapshot identifier: $snapshot_id"

  echo -n 'Registering AMI... ' >&2

  local ami_id="`
    ec2-register -a "$architecture" -n "$description" \
      --region "$EC2_REGION" --kernel "$aki" --root-device-name /dev/sda1 \
      -d "$description" -s "$snapshot_id" -b '/dev/sdb=:10:false' | cut -f2 \
  `" || fatal "Failure while registering AMI using snapshot '$snapshot_id'"

  echo 'done.' >&2
  echo "AMI identifier: $ami_id"

  ec2-create-tags "$ami_id" \
    --region "$EC2_REGION" --tag "Name=$description" >/dev/null \
      || fatal "Failure while setting tags on AMI '$ami_id'"

  echo -n "Deleting temporary volume '$volume_id'... " >&2

  wait_for_volume_availability "$volume_id" &&
  \
  ec2-delete-volume "$volume_id" \
    --region "$EC2_REGION" >/dev/null \
      || warn "Failure while deleting volume '$volume_id'"

  echo 'done.' >&2
}

cd "$base_dir" \
  || fatal 'Unable to locate root directory'

source ./platform/scripts/include/aws \
  || fatal 'Unable to load one or more required libraries'

main "$@"
exit "$?"

