#!/bin/sh

set -o pipefail

fatal()
{
  echo "$@" >&2
  exit 1
}

info()
{
  echo -n "$*... " >&2
}

usage()
{
  echo "Usage: $0 instance_id ami_id [aws_options...]" >&2
  exit 111
}

finished()
{
  local message="$1"
  shift 1

  if [ -z "$message" ]; then
    message='done'
  fi

  echo "$message." >&2
}

main()
{
  if [ "$#" -lt 2 ]; then
    usage
  fi

  local instance_id="$1"
  local ami_id="$2"
  shift 2

  if [ -z "$instance_id" -o -z "$ami_id" ]; then
    usage
  fi

  info 'Looking up instance and AMI'

  local volume_id="`
    aws ec2 describe-instances "$@" --instance-ids "$instance_id" \
      | jq -r '.Reservations[0].Instances[0].BlockDeviceMappings
               | map(select(.DeviceName == "/dev/sda1"))[0].Ebs.VolumeId'
  `" &&
  \
  local availability_zone="`
    aws ec2 describe-instances "$@" --instance-ids "$instance_id" \
      | jq -r '.Reservations[0].Instances[0].Placement.AvailabilityZone'
  `" &&
  \
  local snapshot_id="`
    aws ec2 describe-images --region=us-west-2 --image-ids "$ami_id" \
      | jq -r '.Images[0].BlockDeviceMappings
               | map(select(.DeviceName == "/dev/sda1"))[0].Ebs.SnapshotId'
  `"

  if [ "$?" -ne 0 ]; then
    fatal 'Unable to determine volume/zone/snapshot identifiers'
  fi

  finished "$snapshot_id in $availability_zone"
  info 'Creating volume'

  local new_volume_id="`
    aws ec2 create-volume "$@" --volume-type gp2 \
      --snapshot-id "$snapshot_id" --availability-zone "$availability_zone" \
        | jq -r '.VolumeId'
  `"

  if [ "$?" -ne 0 -o -z "$new_volume_id" ]; then
    fatal 'Volume creation failed'
  fi

  finished "$new_volume_id"
  info 'Detaching old volume'

  local status="`
    aws ec2 detach-volume "$@" \
      --instance-id "$instance_id" --volume-id "$volume_id" | jq -r '.State'
  `"

  if [ "$?" -ne 0 -o -z "$status" ]; then
    fatal 'Volume detach failed'
  fi
  
  finished "$status"

  info 'Waiting for volume to detach'
  sleep 15
  finished

  info 'Attaching new volume'

  local status="`
    aws ec2 attach-volume "$@" --device /dev/sda1 \
      --instance-id "$instance_id" --volume-id "$new_volume_id" | jq -r '.State'
  `"

  if [ "$?" -ne 0 -o -z "$status" ]; then
    fatal 'Volume attach failed'
  fi

  finished
  info 'Deleting old volume'

  local status="`
    aws ec2 delete-volume "$@" --volume-id "$volume_id" \
      && echo 'successful'
  `"

  if [ "$?" -ne 0 -o -z "$status" ]; then
    fatal 'Volume deletion failed'
  fi

  finished

  return 0
}


main "$@"
exit $?

