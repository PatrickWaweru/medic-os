#!/bin/bash

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/.."

create_package_digest()
{
  local staging_dir="$1"
  local digest_type="$2"

  local digest="`
    "${digest_type}sum" "$staging_dir/package.tar.xz" 2>/dev/null
  `"

  if [ "$?" -ne 0 ]; then
    return 1
  fi

  echo "$digest" | cut -f1 -d' ' 2>/dev/null \
    > "$staging_dir/digest-$digest_type"

  if [ "$?" -ne 0 ]; then
    rm -f -- "$staging_dir/digest-$digest_type"
    return 2
  fi
 
  return 0
}

main()
{
  local package="$1"
  local version="$2"
  local platform="$3"
  local source_dir="$4"
  local staging_dir="$5"
  local output_file="$6"

  if [ $# -lt 2 -o $# -gt 6 ]; then
    usage
  fi

  if [ -z "$package" -o -z "$version" ]; then
    usage
  fi

  if [ -z "$platform" ]; then
    platform='noarch'
  fi

  local package_name="$package-v$version-$platform.vpkg"

  if [ -z "$staging_dir" ]; then
    staging_dir="./staging/packages/$package"
  fi

  if [ -z "$output_file" ]; then
    output_file="./images/$platform/iso/packages/$package_name"
  fi

  if [ -z "$source_dir" ]; then
    source_dir="./packages/$package"
  fi

  # Freeze paths
  output_file="`readlink -f "$output_file"`" &&
  source_dir="`readlink -f "$source_dir"`" &&
  staging_dir="`readlink -f "$staging_dir"`"

  if [ "$?" -ne 0 ]; then
    echo "`pwd` '$output_file' '$source_dir' '$staging_dir'"
    fatal 'Unable to resolve one or more paths'
  fi

  # Clear package staging directory
  rm -rf -- "$staging_dir" &&
  mkdir -p -- "$staging_dir" &&
  \
  # Copy package metadata template, if present
  if [ -d "metadata/packages/$package" ]; then
    cp -R -- "metadata/packages/$package" 'staging/packages'
  fi &&
  \
  # Gather and compress package contents
  (cd "$source_dir" &&
    tar -cf - * | xz -9ec > "$staging_dir/package.tar.xz") &&
  \
  # Store the package's base name as metadata
  echo "$package" > "$staging_dir/name" &&
  \
  # Record the package version
  echo "$version" > "$staging_dir/version" &&
  \
  # Record the package's target platform
  echo "$platform" > "$staging_dir/platform" &&
  \
  # Record the package's creation timestamp
  date -u +'%Y-%m-%dT%H:%M:%SZ'> "$staging_dir/build-timestamp" &&
  \
  # Regenerate cryptographic digests
  for type in md5 sha1 sha256 sha512; do
    create_package_digest "$staging_dir" "$type" \
      || fatal "Couldn't create '$type' cryptographic digest for '$package'"
  done &&
  \
  # Combine data and metadata to produce package
  (cd "$staging_dir" && ar -rcs "$output_file" *)

  if [ "$?" -ne 0 ]; then
    fatal "Package creation step for '$package' failed"
  fi

  return 0
}

warn()
{
  echo "Warning: $*" 2>&1
}

fatal()
{
  echo "Fatal: $*" 2>&1
  exit 1
}

usage()
{
  echo "Usage: $0 package-name version" >&2
  echo "       [platform source_dir staging_dir output_file]"
  exit 2
}

cd "$base_dir" \
  || fatal 'Unable to locate root directory'

main "$@"
exit "$?"


