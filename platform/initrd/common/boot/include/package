#!/bin/sh

set -o pipefail

srv_dir='/srv'
receipts_dir="$srv_dir/system/storage/receipts"
settings_dir="$srv_dir/system/settings/packages"
supervisor_dir="$srv_dir/system/storage/supervisor"

package_sanitize_name()
{
  local package="$1"

  basename -- "$package"
  return "$?"
}

service_sanitize_name()
{
  local service="$1"

  basename -- "$service"
  return "$?"
}

package_extract_metadata()
{
  local path="$1"
  local metadata_key="$2"

  ar -p "$path" "$metadata_key" 2>/dev/null
  return "$?"
}

package_extract_name()
{
  local path="$1"

  package_extract_metadata "$path" 'name'
  return "$?"
}

package_extract_version()
{
  local path="$1"

  package_extract_metadata "$path" 'version'
  return "$?"
}

package_extract_digest()
{
  local path="$1"
  local digest_type="$2"

  if ! [ "$digest_type" ]; then
    digest_type='sha512'
  fi

  package_extract_metadata "$path" "digest-$digest_type"
  return "$?"
}

package_retrieve_installed_version()
{
  local package="$1"

  cat "$receipts_dir/$package/version" 2>/dev/null
  return "$?"
}

package_is_installed()
{
  local package="$1"

  test -f "$receipts_dir/$package/version" 2>/dev/null
  return "$?"
}

package_manifest_copy()
{
  local package="$1"
  local manifest_path="$2"

  if [ -z "$manifest_path" ]; then
    manifest_path="$receipts_dir/$package/manifest"
  fi

  local version="`package_retrieve_installed_version "$package"`" \
    || return 1

  local new_manifest_path="$manifest_path.$version"

  cp -af "$manifest_path" "$new_manifest_path" &&
  echo "$new_manifest_path"

  return "$?"
}

package_manifest_remove_all()
{
  local package="$1"
  local manifest_path="$2"

  if [ -z "$manifest_path" ]; then
    manifest_path="$receipts_dir/$package/manifest"
  fi

  if ! cd "$srv_dir"; then
    warn "Unable to change directory to '$srv_dir'"
    return 1
  fi

  manifest_find_all "$manifest_path" \
    | manifest_filter 'file' | while read file; do

    if ! [ -k "$file" ]; then
      if ! rm -f "$file" &>/dev/null; then
        warn "Unable to remove file '$srv_dir/$file'"
      fi
    fi
  done

  manifest_find_all "$manifest_path" \
    | manifest_filter 'directory' | while read dir; do

    if [ -d "$dir" ]; then
      if ! rmdir --ignore-fail-on-non-empty "$dir" &>/dev/null; then
        info "Unable to remove directory '$srv_dir/$dir'"
      fi
    fi
  done

  return "$?"
}

package_manifest_remove_differential()
{
  local package="$1"
  local manifest_previous="$2"
  local manifest_current="$3"

  if ! cd "$srv_dir"; then
    warn "Unable to change directory to '$srv_dir'"
    return 1
  fi

  manifest_find_removed "$manifest_previous" "$manifest_current" \
    | manifest_filter 'file' | while read file; do

    if ! [ -k "$file" ]; then
      if ! rm -f "$file" &>/dev/null; then
        warn "Unable to remove file '$srv_dir/$file'"
      fi
    fi
  done

  manifest_find_removed "$manifest_previous" "$manifest_current" \
    | manifest_filter 'directory' | while read dir; do

    if [ -d "$dir" ]; then
      if ! rmdir --ignore-fail-on-non-empty "$dir" &>/dev/null; then
        info "Unable to remove directory '$srv_dir/$dir'"
      fi
    fi
  done

  return "$?"
}

package_install()
{
  local path="$1"
  local skip_autostart="$2"
  local skip_setup_tasks="$3"

  if ! [ -r "$path" ]; then
    return 1
  fi

  local package="`package_extract_name "$path"`" &&
  local version="`package_extract_version "$path"`"

  if [ "$?" -ne 0 ]; then
    return 2
  fi
 
  log "Installing package '$package'"

  mkdir -p "$receipts_dir/$package" &&
    echo -n "$version" > "$receipts_dir/$package/version"

  if [ "$?" -ne 0 ]; then
    rm -f "$receipts_dir/$package/version"
    return 3
  fi

  log "Extracting files for package '$package'"

  mkdir -p "$receipts_dir/$package" "$srv_dir/scripts/$package" &&
    ar -p "$path" package.tar.xz | xz -dc \
      | (cd "$srv_dir" && tar -xvf - > "$receipts_dir/$package/manifest")

  if [ "$?" -ne 0 ]; then
    warn "Failed to extract files for package '$package' from '$path'"
    rm -f "$receipts_dir/$package"
    return 4
  fi

  if [ -x "$srv_dir/scripts/$package/install" ]; then

    log "Running installation script for package '$package'"
    "$srv_dir/scripts/$package/install"

    if [ "$?" -ne 0 ]; then
      warn "Installation script for package '$package' failed"
      rm -rf "$receipts_dir/$package"
      return 17
    fi
  fi

  if [ -z "$skip_setup_tasks" ]; then
    log "Running setup tasks for package '$package'"

    if ! package_setup "$package"; then
      warn "At least one setup script in package '$package' failed"
      warn "Your installation of '$package' may be incomplete"
      return 18
    fi
  fi

  if [ -z "$skip_autostart" ]; then
    supervisor_start "$package"
    local rv="$?"

    if [ "$rv" -eq 253 ]; then
      info "Package '$package' has no services to start; continuing"
    elif [ "$rv" -ne 0 ]; then
      warn "Failed to start services for package '$package'"
      return 19
    fi
  fi

  log "Successfully installed package '$package'"
  sync

  return 0
}

package_remove()
{
  local package="$1"

  log "Removing package '$package'"
  log "Stopping services for package '$package'"

  supervisor_stop "$package"
  local rv="$?"

  if [ "$rv" -eq 253 ]; then
    info "Package '$package' has no services to stop; continuing"
  elif [ "$rv" -ne 0 ]; then
    warn "Failed to stop services for package '$package'"
    return 1
  fi

  log "Removing package '$package'"

  if [ -x "$srv_dir/scripts/$package/remove" ]; then
    if ! "$srv_dir/scripts/$package/remove"; then
      warn "Removal script for '$package' exited with non-zero status"
      return 2
    fi
  fi

  # Subshell maintains current working directory
  (package_manifest_remove_all "$package")

  if [ "$?" -gt 0 ]; then
    warn "Failed to remove installation records for package '$package'"
    return 3
  fi

  rm -rf "$receipts_dir/$package"

  log "Successfully removed package '$package'"
  sync

  return 0
}

package_update()
{
  local path="$1"
  local force_install="$2"
  local use_soft_restart="$3"

  local package="`package_extract_name "$path"`" &&
  local v_new="`package_extract_version "$path"`" &&
  local v_prev="`package_retrieve_installed_version "$package"`"

  log "Updating package '$package'..."
  log "Examining version information for package '$package'"

  if [ "$?" -ne 0 ]; then
    warn "Failed to read metadata from package file '$file'"
    return 1
  fi

  if ! [ "$v_new" -gt 0 ] 2>/dev/null; then
    warn "Invalid package version information in file '$file'"
    return 2
  fi

  if [ -z "$v_prev" ]; then
    warn "Package '$package' is not currently installed"
    return 3
  fi

  if [ "$v_prev" -ge "$v_new" ]; then
    if [ -z "$force_install" ]; then
      warn "An equal-or-greater version of '$package' is already installed"
      warn "Use the -f/--force option if you want to install it anyway"
      return 4
    fi
  fi

  if [ -z "$use_soft_restart" ]; then
    log "Stopping supervisor for package '$package'"
    supervisor_stop "$package"
    local rv="$?"

    if [ "$rv" -eq 253 ]; then
      info "Package '$package' has no services to stop; continuing"
    elif [ "$rv" -ne 0 ]; then
      warn "Failed to stop supervisor for package '$package'"
      return 5
    fi
  fi

  if ! package_update_twophase "$package" "$path"; then
    warn "Error encountered while updating package '$package'"
    warn "Software installation from file '$path' was unsuccessful"
    return 6
  fi

  if [ -x "$srv_dir/scripts/$package/install" ]; then

    log "Running installation script for package '$package'"
    "$srv_dir/scripts/$package/install" 'update'

    if [ "$?" -ne 0 ]; then
      warn "Installation script for package '$package' failed"
      rm -rf "$receipts_dir/$package"
      return 17
    fi
  fi

  log "Running setup tasks for package '$package'"

  if ! package_setup "$package"; then
    warn "At least one setup script in package '$package' failed"
    warn "Your installation of '$package' may be incomplete"
    return 18
  fi

  if [ "$use_soft_restart" ]; then
    info "Restarting services for package '$package'..."

    supervisor_list_all_services "$package" | while read service; do
      info "Restarting service '$package/$service'"
      if ! supervisor_service_restart "$package" "$service"; then
        warn "Failed to restart service '$package/$service'"
        return 19
      fi
    done
  else
    supervisor_start "$package"
    local rv="$?"

    if [ "$rv" -eq 253 ]; then
      info "Package '$package' has no services to start; continuing"
    elif [ "$rv" -ne 0 ]; then
      warn "Failed to start services for package '$package'"
      return 20
    fi
  fi

  log "Finished examining package '$package'"
  return 0
}

package_update_twophase()
{
  local package="$1"
  local path="$2"

  local manifest="`package_manifest_copy "$package"`" \
    || return 1

  info "Installing package '$path'..."

  package_install "$path" 't' 't' \
    || return 2

  # Subshell maintains current working directory
  (package_manifest_remove_differential \
    "$package" "$manifest" "$receipts_dir/$package/manifest")

  return "$?"
}

package_merge_environment()
{
  local package="$1"

  local env_file="$srv_dir/scripts/$package/env"

  if [ -f "$env_file" ]; then
    source "$env_file"
    merge_environment "$srv_dir" &>/dev/null
    unset merge_environment
  fi
}

package_setup()
{
  local package="`basename -- "$1"`"

  for script in "$srv_dir/scripts/$package/setup"/*; do
    if ! [ -x "$script" ]; then
      continue
    fi

    local task_name="$package/`basename -- "$script"`"
    info "Running setup task '$task_name'"

    if ! "$script"; then
      warn "Setup task '$task_name' failed to complete"
    fi
  done

  package_regenerate_settings "$package"
  return "$?"
}

package_regenerate_settings()
{
  local package="`basename -- "$1"`"

  local src_dir="$srv_dir/settings/$package"
  local target_dir="$settings_dir/$package"

  log "Regenerating settings for package '$package'"

  if ! [ -d "$src_dir" ]; then
    log "Package '$package' has no settings directory; skipping"
    return 0
  fi

  mkdir -p "$target_dir" &&
  \
  template_expand_directories \
    'mustache' 't' "$src_dir" "$target_dir"

  log "Finished regenerating settings for package '$package'"
  return "$?"
}

package_remove_empty_directories()
{
  local path="$1"

  echo "Info: Ignoring directory removal request for '$path'" >&2
  return 0
}

